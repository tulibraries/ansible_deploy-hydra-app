---


- name: Add hydra-jetty specific rail config templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ rails_app_install_path }}/config/{{item}}"
  with_items:
    - jetty.yml
    - fedora.yml
    - solr.yml
  become_user: "{{ app_user }}"
  notify:
      - restart jetty
      - restart passenger app
  tags:
      - rails_app

- name: install Jetty deps
  yum:
    name: "{{item}}"
    state: present
  with_items:
    - curl
    - java-1.8.0-openjdk
    - unzip
  become: yes
  tags:
    - rails_app


- name: Check if the jetty is set up
  stat:
   path: "{{ rails_app_install_path}}/jetty"
  register: jetty
  changed_when: "jetty.stat.isdir is undefined"
  tags:
      - rails_app

- name: set up jetty and config solr
  shell: >
    bash -lc 'bundle exec {{ item }}'
  args:
    chdir: "{{ rails_app_install_path}}"
  with_items:
    - rails g hydra:jetty
    - rake hydra:jetty:config_solr
  become_user: "{{ app_user }}"
  when: "jetty.stat.isdir is undefined"
  notify:
      - restart jetty
  tags:
      - rails_app

- name: Make sure jetty uses log4j config file
  lineinfile:
    dest: "{{ rails_app_install_path}}/jetty/start.ini"
    line: -Dlog4j.configuration=file:resources/log4j.properties
  become_user: "{{ app_user }}"
  notify:
    - restart jetty
  tags:
      - rails_app

- name: Set fedora configuration
  template:
    src: fedora.fcfg.j2
    dest: "{{ rails_app_install_path}}/jetty/fedora/default/server/config/fedora.fcfg"
  become_user: "{{ app_user }}"
  notify:
    - restart jetty
  tags:
      - rails_app

- name: create a systemd script for jetty
  template:
    src: app_jetty.service.j2
    dest: /etc/systemd/system/{{ rails_app_name }}_jetty.service
    mode: 0711
  become: yes
  tags:
    - rails_app
    - init

- name: make sure jetty is started and enabled
  service:
    name: "{{ rails_app_name }}_jetty.service"
    state: started
    enabled: yes
  become: yes
  tags:
    - rails_app
    - init